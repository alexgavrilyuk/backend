// modules/queries/services/analyticsExtractor.js

/**
 * Extracts analytical insights, visualization recommendations, and handles context detection
 * Processes AI responses to identify key insights and visualization patterns
 */

/**
 * Detect if a query contains references to previous conversation context
 * @param {string} query - Natural language query
 * @param {Array} conversationHistory - Previous conversation messages
 * @returns {boolean} True if query has context references
 */
function detectContextReferences(query, conversationHistory) {
  if (!query || conversationHistory.length === 0) {
    return false;
  }

  // Common context reference patterns
  const contextPatterns = [
    /\b(that|those|these|them|it|this)\b/i,
    /\b(previous|prior|last|earlier)\b/i,
    /\b(same|also|as well|too)\b/i,
    /\b(instead|rather)\b/i,
    /\b(another|different)\b/i,
    /\b(change|update|modify)\b/i,
    /\b(and|but|or)\b/i, // If these are at the start, likely continuing
    /^(show|display|list|get|find|what about)/i, // Query starts with verb but no subject
    /\b(how many|how much)\b/i
  ];

  // If query is very short, likely a follow-up
  if (query.split(/\s+/).length <= 5) {
    return true;
  }

  // Check if query matches any context reference patterns
  for (const pattern of contextPatterns) {
    if (pattern.test(query)) {
      return true;
    }
  }

  return false;
}

/**
 * Detect if a query is requesting visualization
 * @param {string} query - Natural language query
 * @returns {boolean} True if query requests visualization
 */
function detectVisualizationRequest(query) {
  if (!query) return false;

  // Common visualization keywords
  const visualizationKeywords = [
    'graph', 'chart', 'plot', 'visualization', 'visualize', 'visual',
    'report', 'dashboard', 'trend', 'compare', 'show me', 'display'
  ];

  return visualizationKeywords.some(keyword =>
    query.toLowerCase().includes(keyword)
  );
}

/**
 * Extract visualization recommendations from AI response
 * @param {string} aiResponse - The response from OpenAI
 * @returns {Array|null} Extracted visualization recommendations
 */
function extractVisualizationRecommendations(aiResponse) {
  // Since we're focusing on actual data analysis rather than visualization recommendations,
  // we're intentionally returning null here as we don't want to extract these anymore.
  // The visualizations will be automatically generated by the visualization service.
  return null;
}

/**
 * Extract analytical insights from AI response
 * @param {string} aiResponse - The response from OpenAI
 * @returns {Array|null} Extracted analytical insights
 */
function extractAnalyticalInsights(aiResponse) {
  if (!aiResponse) return null;

  // Look for insights section
  const insightsSectionMatch = aiResponse.match(/(?:Key Insights?|Analysis|Findings?|Key Takeaways?):([\s\S]*?)(?:(?:\n\n)|$)/i);

  // If we found an insights section, extract it
  if (insightsSectionMatch && insightsSectionMatch[1]) {
    const insightsText = insightsSectionMatch[1].trim();

    // Split into bullet points if present
    if (insightsText.includes('- ')) {
      return insightsText
        .split(/\n\s*-\s*/)
        .filter(item => item.trim().length > 0)
        .map(item => ({ type: 'insight', content: item.trim() }));
    }

    // Otherwise, return the whole section
    return [{ type: 'insight', content: insightsText }];
  }

  // Look for whole paragraphs that might be insights
  const paragraphs = aiResponse.split(/\n\n/);
  const insightParagraphs = [];

  for (const paragraph of paragraphs) {
    // Skip very short paragraphs, SQL blocks, or paragraphs that look like titles
    if (paragraph.length < 30 ||
        paragraph.includes('```') ||
        paragraph.match(/^[A-Z][^.!?]*$/) ||
        paragraph.toLowerCase().includes('request successful') ||
        paragraph.toLowerCase().includes('visualization')) {
      continue;
    }

    // If it looks like a substantive paragraph, treat it as an insight
    insightParagraphs.push({ type: 'insight', content: paragraph.trim() });
  }

  if (insightParagraphs.length > 0) {
    return insightParagraphs;
  }

  // If we still haven't found insights, look for sentences that might contain insights
  const insightKeywords = [
    'shows', 'reveals', 'indicates', 'demonstrates', 'represents',
    'higher', 'lower', 'greater', 'less', 'most', 'least',
    'significant', 'substantial', 'notable', 'key', 'primary',
    'trend', 'pattern', 'increase', 'decrease', 'growth', 'decline'
  ];

  const insightSentences = [];
  const sentences = aiResponse.split(/[.!?](?:\s|$)/);

  for (const sentence of sentences) {
    const sentenceLower = sentence.toLowerCase();
    // Skip very short sentences or SQL-related sentences
    if (sentence.length < 30 || sentenceLower.includes('sql') || sentenceLower.includes('query')) {
      continue;
    }

    // Check if sentence contains insight keywords
    if (insightKeywords.some(keyword => sentenceLower.includes(keyword))) {
      insightSentences.push({ type: 'insight', content: sentence.trim() });
    }
  }

  if (insightSentences.length > 0) {
    return insightSentences;
  }

  // Return null if no insights found
  return null;
}

/**
 * Process an AI response to extract structured information
 * @param {string} aiResponse - The complete AI response
 * @returns {Object} Extracted information from the response
 */
function processAiResponse(aiResponse) {
  if (!aiResponse) return { raw: '' };

  // Extract SQL query if present
  const sqlQueryMatch = aiResponse.match(/```sql\n([\s\S]*?)\n```/);
  const sqlQuery = sqlQueryMatch ? sqlQueryMatch[1].trim() : null;

  // Extract insights
  const insights = extractAnalyticalInsights(aiResponse);

  // Get the description part by removing SQL blocks
  let description = aiResponse.replace(/```sql\n[\s\S]*?\n```/g, '').trim();

  // Remove common AI response prefixes
  description = description.replace(/^(I'll|Here's|Let me|Based on your request)/i, '').trim();

  return {
    raw: aiResponse,
    sqlQuery,
    insights,
    description
  };
}

module.exports = {
  detectContextReferences,
  detectVisualizationRequest,
  extractVisualizationRecommendations,
  extractAnalyticalInsights,
  processAiResponse
};